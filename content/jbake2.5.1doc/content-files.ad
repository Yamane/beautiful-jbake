= Content Files
Jonathan Bullock
2016-10-03
:jbake-type: simple
:jbake-tags: 
:jbake-status: published
:idprefix:

== Content ファイル

=== メタデータヘッダ

メタデータヘッダには Content ファイルを処理するための基本的な設定内容を記述します。

素のHTMLや、各マークダウン記法によって記述されたファイルの先頭には以下のようなメタデータヘッダが *必須* です。

----
title=Weekly Links #2
date=2013-02-01
type=post
tags=weekly links, java
status=published
~~~~~~
----

*status* と *type* のヘッダ項目は *必須* で、その他の項目はオプションです。 <<設定ファイル>> 内にデフォルトの status が記述されている場合には、status の項目は省略することができます。

**date** の項目を記述しない場合、該当ファイルの更新日が使われます。 

AsciiDocで記述されたファイルの場合、メタデータヘッダはオプションになります。
メタデータは AsciiDoc の記法を使って以下のように定義します。

----
= Project Structure
Jonathan Bullock
2013-10-17
:jbake-type: page
:jbake-tags: documentation, manual
:jbake-status: published
----

NOTE: JBake のための属性を AsciiDoc ヘッダに記述する場合、名称の衝突を避けるため `jbake-` プレフィックスを付けます。


==== Status

この項目には以下の3つの状態のうちのひとつを記述します。

* `draft` - draft (下書き) を記述した場合、公開コンテンツと同じく変換処理はされるけれど、`first-post-draft.html` のようにファイル名の末尾に `-draft` が付きます。 また、公開コンテンツには含まれません（一覧などではリンクされません）。
* `published`  - 変換処理されて、公開もされます。
* `published-date` - メタデータヘッダの date が現在日時と同じかそれより古い場合に公開対象になります。

==== Type

この項目によってページを生成する際のテンプレートを決定します。
デフォルトテンプレートでは以下の2種類を選択することができます。

* `type=post` post.ftl によって変換を実施
* `type=page` page.ftl によって変換を実施

テンプレートを追加すれば、これ以外の type をプロジェクトに追加することもできます。
詳しいやり方は <<独自テンプレート>> を参照してください。


==== 独自メタデータ

メタデータヘッダには以下のように独自の項目を記述することもできます。

----
summary=投稿内容が長いので概要とか書くよ！
----

この項目の記述内容は、テンプレートファイルに以下のように記述することによって利用することができます。

----
<p>${content.summary}</p>
----

この機能は https://disqus.com/[Disqus] のコメントのような外部の機能をテンプレートに埋め込んだり、 https://jquery.com/[jQuery] などのJavaScriptのライブラリを使って画像を表示し足りする場合に便利に利用することができます。

==== 階層構造をもつ独自メタデータ

メタデータに階層構造を持たせたい場合、以下のようにJSON形式を使用することができます。

----
type=page
og={"description": "Something"}
----

WARNING: JSONデータは改行なしの１行で記述する必要があります。

このJSONデータをテンプレート内で参照する場合には、以下のように記述します。

----
<#if content?? && content.og??> <1>
	<meta property="og:description" content="${content.og.description}"/> <2>
</#if>
----

<1> `content` と `content.og` が null ではないことをチェック
<2> `content.og` 内の `description` の内容を出力

=== コンテンツ本体

メタデータヘッダ記述より後のすべての内容は、コンテンツ本体としてテンプレートに処理されます。
Markdown記法、AsciiDoc記法によって記述されている場合にはHTMLに変換されます。

