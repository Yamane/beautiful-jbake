= Use as Library
Jonathan Bullock
2017-01-30
:jbake-type: simple
:jbake-status: published
:jbake-tags: 
:idprefix:

== ライブラリとしての利用

JBake は他のソフトウェアシステムからライブラリとして利用することも可能です。
プログラムで自動的に Bake したりとかできます。

=== Maven coordinates

メインの JBake アーティファクトは以下の記述で Maven セントラルリポジトリから入手することができます。

[source,xml]
----
<dependency>
	<groupId>org.jbake</groupId>
	<artifactId>jbake-core</artifactId>
	<version>2.5.1</version>
</dependency>
----

Markdown コンテンツや Freemarker テンプレートエンジンなどをサポートするサードパーティーのライブラリは、 `jbake-core` のオプションライブラリとして定義されています。そのため、これらを使用する場合にはプロジェクトの依存関係を追加する必要があります。

Markdown コンテントをサポートするためには、以下の記述を追加します。

[source,xml]
----
<dependency>
	<groupId>org.pegdown</groupId>
	<artifactId>pegdown</artifactId>
	<version>1.6.0</version>
</dependency>
----

AsciiDoc コンテントをサポートするためには、以下の記述を追加します。

[source,xml]
----
<dependency>
	<groupId>org.asciidoctor</groupId>
	<artifactId>asciidoctorj</artifactId>
	<version>1.5.4.1</version>
</dependency>
----

Freemarker テンプレートをサポートするためには、以下の記述を追加します。

[source,xml]
----
<dependency>
	<groupId>org.freemarker</groupId>
	<artifactId>freemarker</artifactId>
	<version>2.3.25-incubating</version>
</dependency>
----

Groovy テンプレートをサポートするためには、以下の記述を追加します。

[source,xml]
----
<dependency>
    <groupId>org.codehaus.groovy</groupId>
    <artifactId>groovy</artifactId>
    <version>2.4.7</version>
</dependency>
<dependency>
    <groupId>org.codehaus.groovy</groupId>
    <artifactId>groovy-templates</artifactId>
    <version>2.4.7</version>
</dependency>
----

Thymeleaf テンプレートをサポートするためには、以下の記述を追加します。

[source,xml]
----
<dependency>
	<groupId>org.thymeleaf</groupId>
	<artifactId>thymeleaf</artifactId>
	<version>3.0.2.RELEASE</version>
</dependency>
----

Jade テンプレートをサポートするためには、以下の記述を追加します。

[source,xml]
----
<dependency>
	<groupId>de.neuland-bfi</groupId>
	<artifactId>jade4j</artifactId>
	<version>1.2.3</version>
</dependency>
----

=== API

JBake をJavaプログラムから起動する際にメインとなるのは `Oven` クラスになります。
このクラスのインスタンスを生成する際にいくつかの引数を渡し、 `.bake()` メソッドを実行します。

[source, java, subs="attributes,verbatim"]
----
try {
	File source = new File("/path/to/project_source"); //<1>
	File destination = new File("/path/to/project_output"); //<2>
	Oven oven = new Oven(source, destination, true); //<3>
	oven.setupPaths(); //<4>
	oven.bake(); //<5>
} catch (JBakeException e) { //<6>
	// do something with exception here
}
----

<1> プロジェクトのルートディレクトリを定義します。JBake はこのディレクトリ直下の `jbake.properties` を参照します。
<2> 処理結果の出力先ディレクトリを定義します。
<3> 3つ目の引数はローカルキャッシュ (永続的なコンテンツストア) をクリアして Full Bake (全変換) するかどうかのフラグになります。
<4> このメソッドで指定されたパスや、必須となる要素の存在チェックをします。
<5> このメソッドで Baking (変換処理) を実施します。
<6> パスチェックや変換処理で例外が発生した場合、 JBakeException によって通知されます。

=== Logging

コマンドラインインターフェイス以外の全ての出力は、 LogBack を利用して行われています。そのため、クラスパス上の logback.xml を編集することによって制御することができます。
バイナリディストリビューションには、あらかじめ設定された https://github.com/jbake-org/jbake/blob/master/src/dist/lib/logging/logback.xml[logback.xml] が含まれているので、参考にして下さい。
