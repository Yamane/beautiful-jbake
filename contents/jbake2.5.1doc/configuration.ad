= Configuration
Jonathan Bullock
2016-10-03
:jbake-type: simple
:jbake-tags: 
:jbake-status: published
:idprefix:

== 設定ファイル

`jbake.properties` ファイル (または旧バージョンの custom.properties) によって JBake の設定をカスタマイズすることができます。
たとえば、コンテンツやテンプレートを配置するディレクトリを変更したり、RSSフィードを生成するかどうかを決めたりすることができます。

JBake は全ての項目に関するデフォルト値を (https://github.com/jbake-org/jbake/blob/master/src/main/resources/default.properties[default.properties]) にて定義していますが、それらは `jbake.properties` によって上書きされます。
また、ハッシュ文字 ( `#` ) を行頭に記述することで行コメントを記述することができます。
以下のセクションではこのファイル内に設定可能なすべての項目について詳しく説明しています。


=== ビルトインオプション

==== Assets ディレクトリ

この項目は、変換対象外のプロジェクトファイルを配置するディレクトリ位置を定義します。

----
# folder that contains all asset files
asset.folder=assets
----

==== Content ディレクトリ

この項目は、テンプレートによって変換を行う対象となるコンテンツを配置するディレクトリ位置を定義します。

----
# folder that contains all content files
content.folder=content
----

==== 出力ディレクトリ

この項目は、コンテンツの Bake (変換) 結果を出力するディレクトリ位置を定義します。

----
# path to destination folder by default
destination.folder=output
----

==== テンプレートディレクトリ

この項目は、プロジェクトのテンプレートファイルを格納するディレクトリ位置を定義します。

----
# folder that contains all template files
template.folder=templates
----

==== Index テンプレートファイル

この項目は、indexページを生成するためのテンプレートファイルを定義します。

----
# filename of masterindex template file
template.masterindex.file=index.ftl
----

WARNING: 古いバージョンでは、この項目の名称は `template.index.file` でした。変わりました。

==== アーカイブテンプレートファイル

この項目は、archiveページを生成するためのテンプレートファイルを定義します。

----
# filename of archive template file
template.archive.file=archive.ftl
----

==== フィードテンプレートファイル

この項目は、feedファイルを生成するためのテンプレートファイルを定義します。

----
# filename of feed template file
template.feed.file=feed.ftl
----

==== サイトマップテンプレートファイル

この項目は、sitemapファイルを生成するためのテンプレートファイルを定義します。

----
# filename of sitemap template file
template.sitemap.file=sitemap.ftl
----

==== タグ一覧テンプレートファイル

この項目は、各タグの一覧ページを生成するためのテンプレートファイルを定義します。

----
# filename of tag template file
template.tag.file=tags.ftl
----

==== ページテンプレートファイル

この項目は、 type=page のコンテンツを処理するためのテンプレートファイルを定義します。

----
# filename of page template file
template.page.file=page.ftl
----

==== ポストテンプレートファイル

この項目は、 type=posst のコンテンツを処理するためのテンプレートファイルを定義します。

----
# filename of post template file
template.post.file=post.ftl
----

==== テンプレートの文字コード

この項目は、 テンプレートファイルを解析する際の文字コードを定義します。

----
# character encoding MIME name used in templates.
# use one of http://www.iana.org/assignments/character-sets/character-sets.xhtml
template.encoding=UTF-8
----

==== Indexページ処理フラグ

この項目は、 Indexページ生成の ON / OFF を制御します。

----
# render index file?
render.index=true
----

TIP: この項目はコンテンツファイルを独自のIndexファイルとして利用する場合に有用です。

==== アーカイブページ処理フラグ

この項目は、 アーカイブページ生成の ON / OFF を制御します。

----
# render archive file?
render.archive=true
----

==== フィードファイル処理フラグ

この項目は、 フィードファイル生成の ON / OFF を制御します。

----
# render feed file?
render.feed=true
----

==== サイトマップファイル処理フラグ

この項目は、 サイトマップファイル生成の ON / OFF を制御します。

----
# render sitemap.xml file?
render.sitemap=false
----

==== タグ一覧ページ処理フラグ

この項目は、タグ一覧ページ生成の ON / OFF を制御します。

----
# render tag files?
render.tags=true
----

==== Indexページ出力ファイル名

この項目は、Indexページを生成する際のファイル名を定義します。

----
# filename to use for index file
index.file=index.html
----

==== アーカイブページ出力ファイル名

この項目は、アーカイブページを生成する際のファイル名を定義します。

----
# filename to use for archive file
archive.file=archive.html
----

==== フィードファイル出力名

この項目は、フィードファイルを生成する際のファイル名を定義します。

----
# filename to use for feed
feed.file=feed.xml
----

==== サイトマップファイル出力名

この項目は、サイトマップファイルを生成する際のファイル名を定義します。

----
# filename to use for sitemap file
sitemap.file=sitemap.xml
----

==== タグ一覧ページ出力先ディレクトリ

この項目は、タグ一覧ページを出力するディレクトリを定義します。

----
# folder name to use for tag files
tag.path=tags
----

==== タグ文字列のサニタイズ処理フラグ

この項目は、タグの文字列をファイル名として使用する際にサニタイズを行うかどうかを制御します (例：スペースをハイフンに変換する等)。

----
# sanitize tag value before it is used as filename (i.e. replace spaces with hyphens)
tag.sanitize=false
----

この項目を true にした場合、タグ文字列 `west wing` は `west-wing` に置換され、生成されるファイル名は `west-wing.html` になります。

==== ファイル出力時の文字コード

この項目は、ファイルを出力する際に使用される文字コードを定義します。

----
# character encoding MIME name used for rendering.
# use one of http://www.iana.org/assignments/character-sets/character-sets.xhtml
render.encoding=UTF-8
----

==== コンテンツ出力時のファイル拡張子

この項目は、コンテンツファイルの変換出力を行う際のファイル拡張子を定義します。

----
# file extension for output content files
output.extension=.html
----

==== 下書きコンテンツファイルのサフィックス

この項目は、下書き (status=draft) コンテンツを出力する際にファイル名につけるサフィックス文字列を定義します。

----
# draft content suffix
draft.suffix=-draft
----

==== サーバーモードのポート番号

この項目は、サーバーモードで起動する際に使用するポート番号を定義します。

----
# default server port
server.port=8820
----

==== Freemarker プロジェクトファイル

この項目は、Freemarker を用いたサンプルプロジェクトのZIPファイルを定義します。

----
# zip file containing example project structure using freemarker templates
example.project.freemarker=example_project_freemarker.zip
----

==== Groovy SimpleTemplateEngine プロジェクトファイル

この項目は、Groovy SimpleTemplateEngine を用いたサンプルプロジェクトのZIPファイルを定義します。

----
# zip file containing example project structure using groovy templates
example.project.groovy=example_project_groovy.zip
----

==== Groovy MarkupTempateEngine プロジェクトファイル

この項目は、Groovy MarkupTempateEngine を用いたサンプルプロジェクトのZIPファイルを定義します。

----
# zip file containing example project structure using groovy markup templates
example.project.groovy-mte=example_project_groovy-mte.zip
----

==== Thymeleaf プロジェクトファイル

この項目は、Thymeleaf を用いたサンプルプロジェクトのZIPファイルを定義します。

----
# zip file containing example project structure using thymeleaf templates
example.project.thymeleaf=example_project_thymeleaf.zip
----

==== Asciidoctor 設定値

Asciidoc記法で記述されたコンテンツを変換する際に Asciidoctor に設定するパラメータを定義します。

----
# default asciidoctor options
asciidoctor.attributes=source-highlighter=prettify
----

この設定の値を複数設定する場合には、KEY=VALUE のセットをカンマ区切りで記述します。
デフォルト設定では、シンタックスハイライトを Prettify を用いて行うように設定されています。

==== Asciidoctor オプション

Asciidoctor実行時に渡すオプションを定義します。

===== *gem path*

この項目は、外部ディレクトリから gem をロードするように http://asciidoctor.org/docs/asciidoctorj/#gem_path[gem path] を設定します。

----
asciidoctor.option.gemPath=/var/lib/gems/2.1.0
----

NOTE: 実行環境に現在設定されている gem path を確認する場合には、 `gem environment gempath` を実行してください。

===== *requires*

Asciidoctor実行時に参照するライブラリを追加する場合には、以下のような記述を追加してください。

----
asciidoctor.option.requires=asciidoctor-diagram
----

NOTE: 複数のライブラリを追加する場合には、カンマ区切りで記述します。

==== JBake の設定を Asciidoctor にエクスポート

この項目は、JBake の設定を Asciidoctor に属性としてエクスポートし、コンテンツ変換時に参照できるようにするかどうかを制御します。

----
# should JBake config options be exported to Asciidoctor engine?
asciidoctor.attributes.export=false
----

NOTE: デフォルトではこの項目はfalseに設定されています。

エクスポートをする際のプレフィックスを定義することもできます。これはAsciiDocが既存で持つ属性との名称の衝突を避けるために有用です。

----
# prefix that should be used when JBake config options are exported
asciidoctor.attributes.export.prefix=
----

NOTE: デフォルトではこの項目は無効に設定されています。

==== コンテンツファイルのステータスデフォルト値

この項目は、コンテンツファイルのステータスが記述されていなかった場合のデフォルト値を定義します。
この項目を有効にした場合、各コンテンツファイル内のステータス項目は必須ではなくなります。

----
# default status
#default.status=published
----

NOTE: デフォルトではこの項目は無効に設定されています。

==== 日付フォーマットのデフォルト値

この項目は、コンテンツファイルのメタデータヘッダに記述された date 項目を JBake がパースする際に用いられます。

使用できるパターン文字列に関しては https://docs.oracle.com/javase/6/docs/api/java/text/SimpleDateFormat.html[Java API docs] の記述を参照して下さい。

----
# default date format used in content files
date.format=yyyy-MM-dd
----

==== Markdown エクステンション

この項目は、Markdown記法で記述されたコンテンツを変換する際に有効となる Markdown エクステンションを設定します。
複数の値を設定する場合にはカンマで区切って記述します。
設定可能なエクステンションの詳細については https://github.com/sirthias/pegdown[Pegdown docs] を参照してください。

----
# comma delimited default markdown extensions
markdown.extensions=HARDWRAPS,AUTOLINKS,FENCED_CODE_BLOCKS,DEFINITIONS
----

`ALL` を設定することで全ての利用可能なエクステンションを有効にすることが出来ます。また名称の前にハイフンをつけることにより、特定のエクステンションを無効にすることもできます。

----
# comma delimited default markdown extensions
markdown.extensions=ALL,-HARDWRAPS
----

==== Markdown 処理タイムアウト値

この項目には、Markdown記法で記述されたコンテンツを Pegdown パーサーが変換処理する際のタイムアウト時間をミリ秒単位で定義します。
この値は、個々の Markdown コンテンツの処理時間を制限します。

----
# millis to parse single markdown page. See PegDown Parse configuration for details
markdown.maxParsingTimeInMillis=2000
----

==== コンテンツストアの永続化

この項目は、コンテンツファイルの処理中に構築されたコンテンツストアをディスクに保存して永続化するかどうかを制御します。
ディスクに保存されている場合、次の解析時には変更のかかったコンテンツのみが処理されます。
永続化がされていない場合には、毎回すべてのファイルを解析することになります。

----
# database store (local, memory)
db.store=memory
----

* local = コンテンツストアはディスクに永続化されます
* memory = コンテンツストアは Bake中のみメモリに展開されます

==== コンテンツストアを永続化する際のパス

この項目は、コンテンツストアの永続化を行う際にデータを保存するディレクトリを定義します。
コンテンツストアの永続化が有効な場合のみ参照されます。

----
# database path
db.path=cache
----

==== Thymeleaf ロケール

この項目は、Thymeleaf がテンプレートを処理する際のロケールを定義します。

----
# thymeleaf locale
thymeleaf.locale=en
----

==== Asset ディレクトリ内の隠しファイル制御フラグ

この項目は、Asset ディレクトリ内にある隠しファイルを処理の対象にするかどうかを制御します。
この項目の値に `true` を設定した場合、`.DS_Store` や `desktop.ini` のようなファイルは処理の対象外となります。

----
asset.ignore=false
----

==== Index ページのページング制御フラグ

この項目を有効にした場合、Indexページを出力する際にページングが有効になります。
次の項目とあわせて使用します。

----
index.paginate=false
----

==== ページ毎のコンテンツ件数

この項目は、ページングが有効な場合の1ページあたりに表示されるコンテンツ件数を定義します。

----
index.posts_per_page=10
----

==== 拡張子なし URI の有効化フラグ

この項目は、拡張子なし URI を有効にするかどうかを定義します。この項目を有効にした場合、JBake は /blog/2014/03/26/post.html ではなく、 /blog/2014/03/26/post/index.html にファイルを出力し、拡張子なしでURIを参照できるようにします。

----
uri.noExtension=false
----

NOTE: プレフィックスを定義するためには次の項目を定義する必要があります。

==== 拡張子なし URI が有効な場合のプレフィックス

この項目は、拡張子なし URI に用いられるプレフィックスを定義します。

----
uri.noExtension.prefix=/blog/
----

=== 独自設定オプション

`jbake.properties` ファイルには独自の設定を追加することも可能です。
サンプルプロジェクトにはサイトのホストURLを定義する `site.host` が記述されています。

----
site.host=http://jbake.org
----

この独自設定オプションは、フィードファイル用テンプレート内で以下のようにリンクの絶対URLを生成するために参照されています。

----
...
<title><#escape x as x?xml>${post.title}</#escape></title>
<link>${config.site_host}/${post.uri}</link>
<pubDate>${post.date?string("EEE, d MMM yyyy HH:mm:ss Z")}</pubDate>
...
----
